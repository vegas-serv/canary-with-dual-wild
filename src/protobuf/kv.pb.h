// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kv_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kv_2eproto;
namespace Canary {
namespace protobuf {
namespace kv {
class ArrayType;
struct ArrayTypeDefaultTypeInternal;
extern ArrayTypeDefaultTypeInternal _ArrayType_default_instance_;
class KeyValuePair;
struct KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class MapType;
struct MapTypeDefaultTypeInternal;
extern MapTypeDefaultTypeInternal _MapType_default_instance_;
class ValueWrapper;
struct ValueWrapperDefaultTypeInternal;
extern ValueWrapperDefaultTypeInternal _ValueWrapper_default_instance_;
}  // namespace kv
}  // namespace protobuf
}  // namespace Canary
PROTOBUF_NAMESPACE_OPEN
template<> ::Canary::protobuf::kv::ArrayType* Arena::CreateMaybeMessage<::Canary::protobuf::kv::ArrayType>(Arena*);
template<> ::Canary::protobuf::kv::KeyValuePair* Arena::CreateMaybeMessage<::Canary::protobuf::kv::KeyValuePair>(Arena*);
template<> ::Canary::protobuf::kv::MapType* Arena::CreateMaybeMessage<::Canary::protobuf::kv::MapType>(Arena*);
template<> ::Canary::protobuf::kv::ValueWrapper* Arena::CreateMaybeMessage<::Canary::protobuf::kv::ValueWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Canary {
namespace protobuf {
namespace kv {

// ===================================================================

class ValueWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.kv.ValueWrapper) */ {
 public:
  inline ValueWrapper() : ValueWrapper(nullptr) {}
  ~ValueWrapper() override;
  explicit PROTOBUF_CONSTEXPR ValueWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueWrapper(const ValueWrapper& from);
  ValueWrapper(ValueWrapper&& from) noexcept
    : ValueWrapper() {
    *this = ::std::move(from);
  }

  inline ValueWrapper& operator=(const ValueWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueWrapper& operator=(ValueWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStrValue = 1,
    kIntValue = 2,
    kDoubleValue = 3,
    kArrayValue = 4,
    kMapValue = 5,
    kBoolValue = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const ValueWrapper* internal_default_instance() {
    return reinterpret_cast<const ValueWrapper*>(
               &_ValueWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ValueWrapper& a, ValueWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValueWrapper& from) {
    ValueWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.kv.ValueWrapper";
  }
  protected:
  explicit ValueWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kArrayValueFieldNumber = 4,
    kMapValueFieldNumber = 5,
    kBoolValueFieldNumber = 6,
  };
  // string str_value = 1;
  bool has_str_value() const;
  private:
  bool _internal_has_str_value() const;
  public:
  void clear_str_value();
  const std::string& str_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str_value();
  PROTOBUF_NODISCARD std::string* release_str_value();
  void set_allocated_str_value(std::string* str_value);
  private:
  const std::string& _internal_str_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str_value(const std::string& value);
  std::string* _internal_mutable_str_value();
  public:

  // int32 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int32_t int_value() const;
  void set_int_value(int32_t value);
  private:
  int32_t _internal_int_value() const;
  void _internal_set_int_value(int32_t value);
  public:

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // .Canary.protobuf.kv.ArrayType array_value = 4;
  bool has_array_value() const;
  private:
  bool _internal_has_array_value() const;
  public:
  void clear_array_value();
  const ::Canary::protobuf::kv::ArrayType& array_value() const;
  PROTOBUF_NODISCARD ::Canary::protobuf::kv::ArrayType* release_array_value();
  ::Canary::protobuf::kv::ArrayType* mutable_array_value();
  void set_allocated_array_value(::Canary::protobuf::kv::ArrayType* array_value);
  private:
  const ::Canary::protobuf::kv::ArrayType& _internal_array_value() const;
  ::Canary::protobuf::kv::ArrayType* _internal_mutable_array_value();
  public:
  void unsafe_arena_set_allocated_array_value(
      ::Canary::protobuf::kv::ArrayType* array_value);
  ::Canary::protobuf::kv::ArrayType* unsafe_arena_release_array_value();

  // .Canary.protobuf.kv.MapType map_value = 5;
  bool has_map_value() const;
  private:
  bool _internal_has_map_value() const;
  public:
  void clear_map_value();
  const ::Canary::protobuf::kv::MapType& map_value() const;
  PROTOBUF_NODISCARD ::Canary::protobuf::kv::MapType* release_map_value();
  ::Canary::protobuf::kv::MapType* mutable_map_value();
  void set_allocated_map_value(::Canary::protobuf::kv::MapType* map_value);
  private:
  const ::Canary::protobuf::kv::MapType& _internal_map_value() const;
  ::Canary::protobuf::kv::MapType* _internal_mutable_map_value();
  public:
  void unsafe_arena_set_allocated_map_value(
      ::Canary::protobuf::kv::MapType* map_value);
  ::Canary::protobuf::kv::MapType* unsafe_arena_release_map_value();

  // bool bool_value = 6;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Canary.protobuf.kv.ValueWrapper)
 private:
  class _Internal;
  void set_has_str_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_array_value();
  void set_has_map_value();
  void set_has_bool_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_value_;
      int32_t int_value_;
      double double_value_;
      ::Canary::protobuf::kv::ArrayType* array_value_;
      ::Canary::protobuf::kv::MapType* map_value_;
      bool bool_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class ArrayType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.kv.ArrayType) */ {
 public:
  inline ArrayType() : ArrayType(nullptr) {}
  ~ArrayType() override;
  explicit PROTOBUF_CONSTEXPR ArrayType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayType(const ArrayType& from);
  ArrayType(ArrayType&& from) noexcept
    : ArrayType() {
    *this = ::std::move(from);
  }

  inline ArrayType& operator=(const ArrayType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayType& operator=(ArrayType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayType* internal_default_instance() {
    return reinterpret_cast<const ArrayType*>(
               &_ArrayType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArrayType& a, ArrayType& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArrayType& from) {
    ArrayType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.kv.ArrayType";
  }
  protected:
  explicit ArrayType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .Canary.protobuf.kv.ValueWrapper values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Canary::protobuf::kv::ValueWrapper* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::ValueWrapper >*
      mutable_values();
  private:
  const ::Canary::protobuf::kv::ValueWrapper& _internal_values(int index) const;
  ::Canary::protobuf::kv::ValueWrapper* _internal_add_values();
  public:
  const ::Canary::protobuf::kv::ValueWrapper& values(int index) const;
  ::Canary::protobuf::kv::ValueWrapper* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::ValueWrapper >&
      values() const;

  // @@protoc_insertion_point(class_scope:Canary.protobuf.kv.ArrayType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::ValueWrapper > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.kv.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {}
  ~KeyValuePair() override;
  explicit PROTOBUF_CONSTEXPR KeyValuePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValuePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyValuePair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyValuePair& from) {
    KeyValuePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.kv.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .Canary.protobuf.kv.ValueWrapper value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Canary::protobuf::kv::ValueWrapper& value() const;
  PROTOBUF_NODISCARD ::Canary::protobuf::kv::ValueWrapper* release_value();
  ::Canary::protobuf::kv::ValueWrapper* mutable_value();
  void set_allocated_value(::Canary::protobuf::kv::ValueWrapper* value);
  private:
  const ::Canary::protobuf::kv::ValueWrapper& _internal_value() const;
  ::Canary::protobuf::kv::ValueWrapper* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Canary::protobuf::kv::ValueWrapper* value);
  ::Canary::protobuf::kv::ValueWrapper* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:Canary.protobuf.kv.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::Canary::protobuf::kv::ValueWrapper* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class MapType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.kv.MapType) */ {
 public:
  inline MapType() : MapType(nullptr) {}
  ~MapType() override;
  explicit PROTOBUF_CONSTEXPR MapType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapType(const MapType& from);
  MapType(MapType&& from) noexcept
    : MapType() {
    *this = ::std::move(from);
  }

  inline MapType& operator=(const MapType& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapType& operator=(MapType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapType& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapType* internal_default_instance() {
    return reinterpret_cast<const MapType*>(
               &_MapType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapType& a, MapType& b) {
    a.Swap(&b);
  }
  inline void Swap(MapType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapType& from) {
    MapType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.kv.MapType";
  }
  protected:
  explicit MapType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .Canary.protobuf.kv.KeyValuePair items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Canary::protobuf::kv::KeyValuePair* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::KeyValuePair >*
      mutable_items();
  private:
  const ::Canary::protobuf::kv::KeyValuePair& _internal_items(int index) const;
  ::Canary::protobuf::kv::KeyValuePair* _internal_add_items();
  public:
  const ::Canary::protobuf::kv::KeyValuePair& items(int index) const;
  ::Canary::protobuf::kv::KeyValuePair* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::KeyValuePair >&
      items() const;

  // @@protoc_insertion_point(class_scope:Canary.protobuf.kv.MapType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::KeyValuePair > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ValueWrapper

// string str_value = 1;
inline bool ValueWrapper::_internal_has_str_value() const {
  return value_case() == kStrValue;
}
inline bool ValueWrapper::has_str_value() const {
  return _internal_has_str_value();
}
inline void ValueWrapper::set_has_str_value() {
  _impl_._oneof_case_[0] = kStrValue;
}
inline void ValueWrapper::clear_str_value() {
  if (_internal_has_str_value()) {
    _impl_.value_.str_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueWrapper::str_value() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.ValueWrapper.str_value)
  return _internal_str_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueWrapper::set_str_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    _impl_.value_.str_value_.InitDefault();
  }
  _impl_.value_.str_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Canary.protobuf.kv.ValueWrapper.str_value)
}
inline std::string* ValueWrapper::mutable_str_value() {
  std::string* _s = _internal_mutable_str_value();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.kv.ValueWrapper.str_value)
  return _s;
}
inline const std::string& ValueWrapper::_internal_str_value() const {
  if (_internal_has_str_value()) {
    return _impl_.value_.str_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueWrapper::_internal_set_str_value(const std::string& value) {
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    _impl_.value_.str_value_.InitDefault();
  }
  _impl_.value_.str_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueWrapper::_internal_mutable_str_value() {
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    _impl_.value_.str_value_.InitDefault();
  }
  return _impl_.value_.str_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueWrapper::release_str_value() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.kv.ValueWrapper.str_value)
  if (_internal_has_str_value()) {
    clear_has_value();
    return _impl_.value_.str_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueWrapper::set_allocated_str_value(std::string* str_value) {
  if (has_value()) {
    clear_value();
  }
  if (str_value != nullptr) {
    set_has_str_value();
    _impl_.value_.str_value_.InitAllocated(str_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Canary.protobuf.kv.ValueWrapper.str_value)
}

// int32 int_value = 2;
inline bool ValueWrapper::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool ValueWrapper::has_int_value() const {
  return _internal_has_int_value();
}
inline void ValueWrapper::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void ValueWrapper::clear_int_value() {
  if (_internal_has_int_value()) {
    _impl_.value_.int_value_ = 0;
    clear_has_value();
  }
}
inline int32_t ValueWrapper::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return _impl_.value_.int_value_;
  }
  return 0;
}
inline void ValueWrapper::_internal_set_int_value(int32_t value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}
inline int32_t ValueWrapper::int_value() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.ValueWrapper.int_value)
  return _internal_int_value();
}
inline void ValueWrapper::set_int_value(int32_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.kv.ValueWrapper.int_value)
}

// double double_value = 3;
inline bool ValueWrapper::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool ValueWrapper::has_double_value() const {
  return _internal_has_double_value();
}
inline void ValueWrapper::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void ValueWrapper::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ValueWrapper::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void ValueWrapper::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}
inline double ValueWrapper::double_value() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.ValueWrapper.double_value)
  return _internal_double_value();
}
inline void ValueWrapper::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.kv.ValueWrapper.double_value)
}

// .Canary.protobuf.kv.ArrayType array_value = 4;
inline bool ValueWrapper::_internal_has_array_value() const {
  return value_case() == kArrayValue;
}
inline bool ValueWrapper::has_array_value() const {
  return _internal_has_array_value();
}
inline void ValueWrapper::set_has_array_value() {
  _impl_._oneof_case_[0] = kArrayValue;
}
inline void ValueWrapper::clear_array_value() {
  if (_internal_has_array_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.array_value_;
    }
    clear_has_value();
  }
}
inline ::Canary::protobuf::kv::ArrayType* ValueWrapper::release_array_value() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.kv.ValueWrapper.array_value)
  if (_internal_has_array_value()) {
    clear_has_value();
    ::Canary::protobuf::kv::ArrayType* temp = _impl_.value_.array_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Canary::protobuf::kv::ArrayType& ValueWrapper::_internal_array_value() const {
  return _internal_has_array_value()
      ? *_impl_.value_.array_value_
      : reinterpret_cast< ::Canary::protobuf::kv::ArrayType&>(::Canary::protobuf::kv::_ArrayType_default_instance_);
}
inline const ::Canary::protobuf::kv::ArrayType& ValueWrapper::array_value() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.ValueWrapper.array_value)
  return _internal_array_value();
}
inline ::Canary::protobuf::kv::ArrayType* ValueWrapper::unsafe_arena_release_array_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Canary.protobuf.kv.ValueWrapper.array_value)
  if (_internal_has_array_value()) {
    clear_has_value();
    ::Canary::protobuf::kv::ArrayType* temp = _impl_.value_.array_value_;
    _impl_.value_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueWrapper::unsafe_arena_set_allocated_array_value(::Canary::protobuf::kv::ArrayType* array_value) {
  clear_value();
  if (array_value) {
    set_has_array_value();
    _impl_.value_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Canary.protobuf.kv.ValueWrapper.array_value)
}
inline ::Canary::protobuf::kv::ArrayType* ValueWrapper::_internal_mutable_array_value() {
  if (!_internal_has_array_value()) {
    clear_value();
    set_has_array_value();
    _impl_.value_.array_value_ = CreateMaybeMessage< ::Canary::protobuf::kv::ArrayType >(GetArenaForAllocation());
  }
  return _impl_.value_.array_value_;
}
inline ::Canary::protobuf::kv::ArrayType* ValueWrapper::mutable_array_value() {
  ::Canary::protobuf::kv::ArrayType* _msg = _internal_mutable_array_value();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.kv.ValueWrapper.array_value)
  return _msg;
}

// .Canary.protobuf.kv.MapType map_value = 5;
inline bool ValueWrapper::_internal_has_map_value() const {
  return value_case() == kMapValue;
}
inline bool ValueWrapper::has_map_value() const {
  return _internal_has_map_value();
}
inline void ValueWrapper::set_has_map_value() {
  _impl_._oneof_case_[0] = kMapValue;
}
inline void ValueWrapper::clear_map_value() {
  if (_internal_has_map_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.map_value_;
    }
    clear_has_value();
  }
}
inline ::Canary::protobuf::kv::MapType* ValueWrapper::release_map_value() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.kv.ValueWrapper.map_value)
  if (_internal_has_map_value()) {
    clear_has_value();
    ::Canary::protobuf::kv::MapType* temp = _impl_.value_.map_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.map_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Canary::protobuf::kv::MapType& ValueWrapper::_internal_map_value() const {
  return _internal_has_map_value()
      ? *_impl_.value_.map_value_
      : reinterpret_cast< ::Canary::protobuf::kv::MapType&>(::Canary::protobuf::kv::_MapType_default_instance_);
}
inline const ::Canary::protobuf::kv::MapType& ValueWrapper::map_value() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.ValueWrapper.map_value)
  return _internal_map_value();
}
inline ::Canary::protobuf::kv::MapType* ValueWrapper::unsafe_arena_release_map_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Canary.protobuf.kv.ValueWrapper.map_value)
  if (_internal_has_map_value()) {
    clear_has_value();
    ::Canary::protobuf::kv::MapType* temp = _impl_.value_.map_value_;
    _impl_.value_.map_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueWrapper::unsafe_arena_set_allocated_map_value(::Canary::protobuf::kv::MapType* map_value) {
  clear_value();
  if (map_value) {
    set_has_map_value();
    _impl_.value_.map_value_ = map_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Canary.protobuf.kv.ValueWrapper.map_value)
}
inline ::Canary::protobuf::kv::MapType* ValueWrapper::_internal_mutable_map_value() {
  if (!_internal_has_map_value()) {
    clear_value();
    set_has_map_value();
    _impl_.value_.map_value_ = CreateMaybeMessage< ::Canary::protobuf::kv::MapType >(GetArenaForAllocation());
  }
  return _impl_.value_.map_value_;
}
inline ::Canary::protobuf::kv::MapType* ValueWrapper::mutable_map_value() {
  ::Canary::protobuf::kv::MapType* _msg = _internal_mutable_map_value();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.kv.ValueWrapper.map_value)
  return _msg;
}

// bool bool_value = 6;
inline bool ValueWrapper::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool ValueWrapper::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void ValueWrapper::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void ValueWrapper::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ValueWrapper::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void ValueWrapper::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool ValueWrapper::bool_value() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.ValueWrapper.bool_value)
  return _internal_bool_value();
}
inline void ValueWrapper::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.kv.ValueWrapper.bool_value)
}

inline bool ValueWrapper::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ValueWrapper::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ValueWrapper::ValueCase ValueWrapper::value_case() const {
  return ValueWrapper::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArrayType

// repeated .Canary.protobuf.kv.ValueWrapper values = 1;
inline int ArrayType::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int ArrayType::values_size() const {
  return _internal_values_size();
}
inline void ArrayType::clear_values() {
  _impl_.values_.Clear();
}
inline ::Canary::protobuf::kv::ValueWrapper* ArrayType::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.kv.ArrayType.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::ValueWrapper >*
ArrayType::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.kv.ArrayType.values)
  return &_impl_.values_;
}
inline const ::Canary::protobuf::kv::ValueWrapper& ArrayType::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::Canary::protobuf::kv::ValueWrapper& ArrayType::values(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.ArrayType.values)
  return _internal_values(index);
}
inline ::Canary::protobuf::kv::ValueWrapper* ArrayType::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::Canary::protobuf::kv::ValueWrapper* ArrayType::add_values() {
  ::Canary::protobuf::kv::ValueWrapper* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:Canary.protobuf.kv.ArrayType.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::ValueWrapper >&
ArrayType::values() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.kv.ArrayType.values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.KeyValuePair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyValuePair::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Canary.protobuf.kv.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.kv.KeyValuePair.key)
  return _s;
}
inline const std::string& KeyValuePair::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.kv.KeyValuePair.key)
  return _impl_.key_.Release();
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Canary.protobuf.kv.KeyValuePair.key)
}

// .Canary.protobuf.kv.ValueWrapper value = 2;
inline bool KeyValuePair::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool KeyValuePair::has_value() const {
  return _internal_has_value();
}
inline void KeyValuePair::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Canary::protobuf::kv::ValueWrapper& KeyValuePair::_internal_value() const {
  const ::Canary::protobuf::kv::ValueWrapper* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Canary::protobuf::kv::ValueWrapper&>(
      ::Canary::protobuf::kv::_ValueWrapper_default_instance_);
}
inline const ::Canary::protobuf::kv::ValueWrapper& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.KeyValuePair.value)
  return _internal_value();
}
inline void KeyValuePair::unsafe_arena_set_allocated_value(
    ::Canary::protobuf::kv::ValueWrapper* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Canary.protobuf.kv.KeyValuePair.value)
}
inline ::Canary::protobuf::kv::ValueWrapper* KeyValuePair::release_value() {
  
  ::Canary::protobuf::kv::ValueWrapper* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Canary::protobuf::kv::ValueWrapper* KeyValuePair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.kv.KeyValuePair.value)
  
  ::Canary::protobuf::kv::ValueWrapper* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Canary::protobuf::kv::ValueWrapper* KeyValuePair::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Canary::protobuf::kv::ValueWrapper>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Canary::protobuf::kv::ValueWrapper* KeyValuePair::mutable_value() {
  ::Canary::protobuf::kv::ValueWrapper* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.kv.KeyValuePair.value)
  return _msg;
}
inline void KeyValuePair::set_allocated_value(::Canary::protobuf::kv::ValueWrapper* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Canary.protobuf.kv.KeyValuePair.value)
}

// -------------------------------------------------------------------

// MapType

// repeated .Canary.protobuf.kv.KeyValuePair items = 1;
inline int MapType::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int MapType::items_size() const {
  return _internal_items_size();
}
inline void MapType::clear_items() {
  _impl_.items_.Clear();
}
inline ::Canary::protobuf::kv::KeyValuePair* MapType::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.kv.MapType.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::KeyValuePair >*
MapType::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.kv.MapType.items)
  return &_impl_.items_;
}
inline const ::Canary::protobuf::kv::KeyValuePair& MapType::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Canary::protobuf::kv::KeyValuePair& MapType::items(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.kv.MapType.items)
  return _internal_items(index);
}
inline ::Canary::protobuf::kv::KeyValuePair* MapType::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Canary::protobuf::kv::KeyValuePair* MapType::add_items() {
  ::Canary::protobuf::kv::KeyValuePair* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Canary.protobuf.kv.MapType.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::kv::KeyValuePair >&
MapType::items() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.kv.MapType.items)
  return _impl_.items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kv
}  // namespace protobuf
}  // namespace Canary

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
